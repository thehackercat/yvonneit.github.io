<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on My New Hugo Site</title>
    <link>http://ironroot.zone/blog/</link>
    <description>Recent content in Blogs on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Mar 2021 01:05:20 +0800</lastBuildDate><atom:link href="http://ironroot.zone/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React 基础组件和类组件</title>
      <link>http://ironroot.zone/blog/post/first/</link>
      <pubDate>Wed, 31 Mar 2021 01:05:20 +0800</pubDate>
      
      <guid>http://ironroot.zone/blog/post/first/</guid>
      <description>概念和用法 函数组件 接收 props 对象并返回一个 react 元素
function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } class 组件 继承 React.Component 并且创建 render 函数返回 react 元素
class Welcome extends React.Component { constructor(props) { super(props) } render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } 区别 代码量 函数式组件更少
状态管理 函数组件也是无状态组件，不能使用 setState()。
React 16.8 之前如果需要在组件中使用 state
 创建 class 组件 提升 state 至父组件中，通过 props 传递给子组件  但是 React 16.8 更新了 Hooks 之后，可以在函数组件中使用 useState 钩子去管理 state。
生命周期钩子 React 16.</description>
    </item>
    
    <item>
      <title>RxJS 入门</title>
      <link>http://ironroot.zone/blog/post/second/</link>
      <pubDate>Wed, 31 Mar 2021 01:05:20 +0800</pubDate>
      
      <guid>http://ironroot.zone/blog/post/second/</guid>
      <description>什么是 RxJS RxJS (Reactive Extensions For JavaScript) RxJS即Lodash for async，一个通过observable组合各种非同步行为的library。其中，Reactive 是指响应式编程(Reactive Programming)。
任何异步事件在响应式编程都是异步事件流。不仅仅是 click、hover 这种事件，任何变量、用户输入、属性、缓存、数据结构等，响应式编程把所有事物都看成是数据流。数据流是类似数组一样的序列，可以像数组一样，用 merge、map、concat 等方法操作。
Observable 一个序列，里面的元素会随着时间推送
 在未被订阅之前不会送出元素 可被订阅 具有多种operators  var mouseOver = Observable.fromEvent(DOM, &#39;mouseover&#39;); var subscription = mouseMove.subscribe((x) =&amp;gt; console.log(x); subscription.unsubscribe() 建立 Observable 的一些API：
 单值：of, empty, never 多值：from 定时：interval, timer 从事件创建：fromEvent 从 Promise 创建：fromPromise 自定义创建：create  Observable.of(1,2,3) Observable.from([2,3,4]) Observable.from(fetch(&#39;url&#39;)) Observable.ajax(&#39;url&#39;) Observable.fromEvent(DOM, &#39;click&#39;) Observable.interval(1000) // example var sub = Observable.from([1,2,3]) .map(x =&amp;gt; x+1) .filter(x =&amp;gt; x%2===0) .</description>
    </item>
    
  </channel>
</rss>
